#lang racket
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (make-rat n d)
(let ((g (better-gcd n d)))
(cons (/ n g) (/ d g))))
(define (better-make-rat n d)
  (cond((and (< n 0) (< d 0)) (make-rat (- n) (- d)))
       ((and (>= n 0) (< d 0)) (make-rat (- n) (- d)))
       ((and (< n 0) (>= d 0)) (make-rat n d))
       ((and (>= n 0) (>= d 0)) (make-rat n d))))
(define (better-gcd n d)
  (cond((and (< n 0) (< d 0)) (gcd (- n) (- d)))
       ((and (>= n 0) (< d 0)) (gcd n (- d)))
       ((and (< n 0) (>= d 0)) (gcd (- n) d))
       ((and (>= n 0) (>= d 0)) (gcd n d))))
(better-make-rat 5 -30)