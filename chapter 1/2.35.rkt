#lang racket
(define (leaves x)
  (cond ((null? x) (list))
        ((not (pair? x)) (list x))
        (else (append (leaves (car x))
                 (leaves (cdr x))))))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define x (list 1 (list 2 (list 3 4))))
(define (accumulate-leaves tree)
  (accumulate (lambda (first remainder)
              (cond((null? first) (list))
                   ((not (pair? first)) (append (list first) (accumulate-leaves remainder)))
                   ((null? remainder) (accumulate-leaves first))
                   (else (append (accumulate-leaves (list first)) (accumulate-leaves remainder)))))
              (list) tree))
(accumulate-leaves (list x x))