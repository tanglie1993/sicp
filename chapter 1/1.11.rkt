#lang racket
(define (recursion n)
  (if (< n 4) n
      (+ (recursion (- n 1)) (* 2 (recursion (- n 2))) (* 3 (recursion (- n 3))))
  )
)
(recursion 4)
(define (iterationStartWith a b c n)
  (cond ((= n 1) a)
        ((= n 2) b)
        ((= n 3) c)
        (else (iterationStartWith b c (getNext a b c) (- n 1)))
  )
)
(define (getNext a b c)
  (+ c (* 2 b) (* 3 a)))
(define (iteration n)
  (iterationStartWith 1 2 3 n)
)
(iteration 4)