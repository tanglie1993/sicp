(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '())
          (backward-front-ptr '())
          (backward-rear-ptr '()))
        (define (insert-queue! item)
            (if (null? front-ptr)
                    (begin
                        (set! front-ptr (list item))
                        (set! rear-ptr front-ptr)
                        (set! backward-front-ptr rear-ptr)
                        (set! backward-rear-ptr front-ptr)
                        front-ptr)
                    (begin
                      (let
                        ((tempbackwardfront (cons (list item) backward-front-ptr)))
                        (set-cdr! rear-ptr (car tempbackwardfront))
                        (set! rear-ptr (cdr rear-ptr))
                        (set! backward-front-ptr tempbackwardfront)
                        front-ptr))))
      (define (insert-queue-front! item)
            (if (null? front-ptr)
                    (begin
                        (set! front-ptr (list item))
                        (set! rear-ptr front-ptr)
                        (set! backward-front-ptr rear-ptr)
                        (set! backward-rear-ptr front-ptr)
                        front-ptr)
                    (begin
                      (let
                        ((tempfront (cons item front-ptr)))
                        (set! front-ptr tempfront)
                        (set! backward-rear-ptr front-ptr)
                        front-ptr))))
      (define (delete-queue!)
            (set! front-ptr (cdr front-ptr))
            (set! backward-rear-ptr front-ptr)
                    front-ptr)
      (define (delete-queue-rear!)
            (set! backward-front-ptr (cdr backward-front-ptr))
            (set! rear-ptr backward-front-ptr)
                    front-ptr)
      (define (front) (car front-ptr))
      (define (rear) (if (list? (car backward-front-ptr))
                      (car (car backward-front-ptr))
                      (car backward-front-ptr))
        )
       
        (define (dispatch m)
            (cond ((eq? m 'insert-queue!)
                    insert-queue!)
                  ((eq? m 'insert-queue-front!)
                    insert-queue-front!)
                  ((eq? m 'delete-queue-rear!)
                    delete-queue-rear!)
                  ((eq? m 'front)
                    (front))
                  ((eq? m 'rear)
                    (rear))
                  ((eq? m 'delete-queue!)
                   delete-queue!)))
        dispatch))

(define q (make-queue))
((q 'insert-queue!) 'a)
(q 'front)
(q 'rear)
((q 'insert-queue!) 'b)
(q 'front)
(q 'rear)
((q 'insert-queue!) 'c)
(q 'front)
(q 'rear)
((q 'insert-queue!) 'd)
(q 'front)
(q 'rear)
((q 'insert-queue-front!) 'e)
(q 'front)
(q 'rear)
((q 'delete-queue-rear!))
(q 'front)
(q 'rear)
((q 'delete-queue-rear!))
(q 'front)
(q 'rear)
((q 'delete-queue!))
(q 'front)
(q 'rear)